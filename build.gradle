plugins {
	id 'fabric-loom' version '0.2.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
	mavenCentral()
	mavenLocal()
	maven{ url="https://minecraft.curseforge.com/api/maven" }
	maven{ url="https://maven.fabricmc.net" }
    maven{ url="http://maven.sargunv.s3-website-us-west-2.amazonaws.com/" }
	//maven{ url="http://server.bbkr.space:8081/artifactory/libs-snapshot/" } //shouldn't need snapshot repo any more
	maven{ url="http://server.bbkr.space:8081/artifactory/libs-release/" }
	maven{ url="https://maven.jamieswhiteshirt.com/libs-release/" }
	maven{ url="https://maven.abusedmaster.xyz" }
	maven{ url="https://jitpack.io" }
	maven{ url="https://maven.sk89q.com/repo" }
	maven{ url="https://maven.jamieswhiteshirt.com/libs-release/" }
	maven{ url="https://repo.elytradev.com/" }
	maven{ url="https://maven.swordglowsblue.com/" }
	maven{ url="http://maven.modmuss50.me" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modApi("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") {
		force = true
	}

	modApi "me.sargunvohra.mcmods:auto-config:${project.auto_config_version}"
	modApi "com.github.Siphalor:tweed-api:${project.tweed_api_version}"
	modImplementation("me.shedaniel.cloth:config-2:${project.cloth_config_version}") {
		force = true
	}

	modApi "vampirelib:VampireLib:${project.vampirelib_version}"
	modApi ("io.github.cottonmc:LibGui:1.2.5-b") { exclude group:"io.github.prospector", module:"modmenu" }

	// For dev env testing
	modImplementation "com.jamieswhiteshirt:developer-mode:${project.developer_mode_version}"
	modImplementation("me.shedaniel:RoughlyEnoughItems:${project.rei_version}") {
		exclude(module: "ModMenu")
	}
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
	modImplementation "leaf-decay:leaf:decay:${project.leaf_decay_version}"
	modImplementation "worldedit:worldedit-fabric-mc1.14.4:${project.we_version}"
	modImplementation "artificemc:artifice:${project.artifice_version}"
	modImplementation "malilib:malilib-fabric-1.14.4:0.10.0:dev.20"

	compile "com.google.code.findbugs:jsr305:3.0.2"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

File configFile = file('gradle.properties')
task updateFabric {
	doFirst {
		// Get fabric versions/webpage
		def fabricWeb ="https://maven.fabricmc.net/net/fabricmc/"
		def fabricData="maven-metadata.xml"
		def (loader) = "${fabricWeb}fabric-loader/${fabricData}".toURL().text           =~ "<release>.*</release>"
		def (api)    = "${fabricWeb}fabric-api/fabric-api/${fabricData}".toURL().text   =~ "<release>.*</release>"
		def (yarn)   = "${fabricWeb}yarn/${fabricData}".toURL().text                    =~ "<release>.*</release>"
		def loom     = "${fabricWeb}fabric-loom/${fabricData}".toURL().text             =~ "<version>.*</version>"
		// Filter results
		loader = loader.replaceAll("<[/]*release>", "")
		api    = api.replaceAll("<[/]*release>", "")
		yarn   = yarn.replaceAll("<[/]*release>", "")
		loom   = loom[( (int) loom.size())-1].replaceAll("<[/]*version>", "")
		// Print results
		println "yarn   = ${yarn}"
		println "loader = ${loader}"
		println "api    = ${api}"
		println "loom   = ${loom}"

		// Update versions to the latest
		configFile.setText(configFile.getText()
				.replaceFirst("yarn_mappings=1.14.4+build.9", "yarn_mappings=${yarn}")
				.replaceFirst("loader_version=0.4.8+build.159", "loader_version=${loader}")
				.replaceFirst("fabric_version=0.3.1+build.208", "fabric_version=${api}")
		)
	}
}